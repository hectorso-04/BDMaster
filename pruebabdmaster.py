# -*- coding: utf-8 -*-
"""PruebaBDMaster

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fL9lKqdYMBPtb1LNBvuVmMxwBOdI4WRN
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install pandas openpyxl

import pandas as pd
import os

# Ruta de tu carpeta en Google Drive
ruta_carpeta = '/content/drive/My Drive/BASE GENERAL MASTER/'  # ¡Cambia esto!

# Lista de archivos específicos a procesar
archivos = [
    "MEDICINA LEGAL A (Respuestas).xlsx",
    "MEDICINA LEGAL B  (Respuestas).xlsx",
    "MEDINICINA LEGAL C (Respuestas).xlsx",
    "LOFOS A (Respuestas).xlsx",
    "LOFOS B (Respuestas).xlsx",
    "LOFOS C (Respuestas).xlsx",
    "LOFOS D (Respuestas).xlsx",
    "GENETICA A (Respuestas).xlsx",
    "GENETICA B (Respuestas).xlsx",
    "GENETICA C (Respuestas).xlsx",
    "GENETICA D (Respuestas).xlsx",
    "GENETICA E (Respuestas).xlsx",
    "ACNID A (Respuestas).xlsx",
    "DILIGENCIA DE EXHUMACION (Respuestas).xlsx"
]

# Lista para almacenar los DataFrames válidos
dataframes = []
bases_faltantes = []

# Leer y procesar cada archivo en el orden especificado
for idx, archivo in enumerate(archivos):
    ruta_completa = os.path.join(ruta_carpeta, archivo)
    if not os.path.exists(ruta_completa):
        print(f"Advertencia: El archivo {archivo} no existe en la carpeta.")
        continue

    df = pd.read_excel(ruta_completa)

    # Estandarizar columna clave
    if 'CNI / CI o RH' not in df.columns:
        if 'CNI/CI/RH  NUMERO INTERNO' in df.columns:
            df = df.rename(columns={'CNI/CI/RH  NUMERO INTERNO': 'CNI / CI o RH'})
        else:
            bases_faltantes.append(archivo)
            continue

    # Eliminar duplicados
    df = df.drop_duplicates(subset=['CNI / CI o RH'], keep='first')

    # Renombrar columnas (excepto la clave) con sufijo numérico según el orden
    suffix = f"_{idx+1}"
    df = df.rename(columns={col: f"{col}{suffix}"
                          for col in df.columns
                          if col != 'CNI / CI o RH'})

    dataframes.append(df)

# Advertencia de bases omitidas
if bases_faltantes:
    print("Bases omitidas (sin columna 'CNI / CI o RH'):")
    for base in bases_faltantes:
        print(f"- {base}")

# Consolidar DataFrames
if dataframes:
    # Unir todas las bases usando "CNI / CI o RH"
    df_final = dataframes[0]
    for df in dataframes[1:]:
        df_final = pd.merge(df_final, df, on='CNI / CI o RH', how='outer')

    # Consolidar Marca temporal (tomar la primera no nula de izquierda a derecha)
    columnas_marca = [col for col in df_final.columns if "Marca temporal" in col]
    df_final["Marca temporal"] = df_final[columnas_marca].bfill(axis=1).iloc[:, 0]
    df_final = df_final.drop(columns=columnas_marca)

    # Reordenar columnas según el orden original de los archivos
    column_order = ['Marca temporal', 'CNI / CI o RH']
    for idx in range(len(dataframes)):
        suffix = f"_{idx+1}"
        columns_from_df = [col for col in df_final.columns
                          if col.endswith(suffix) and col not in column_order]
        column_order.extend(columns_from_df)

    df_final = df_final[column_order]

    # Guardar el resultado (empezando desde la segunda fila)
    ruta_salida = os.path.join(ruta_carpeta, 'BASE_CONSOLIDADA.xlsx')
    with pd.ExcelWriter(ruta_salida, engine='openpyxl') as writer:
        df_final.to_excel(writer, index=False)

    print("¡Proceso completado! Archivo guardado en:", ruta_salida)
else:
    print("Error: Ningún archivo tiene la columna 'CNI / CI o RH'.")